---
title: "CARIT & Guessing Behavior"
format: 
  html:
    self-contained: true
    code-fold: true
    code-tools: true
    toc: true
execute: 
  warning: false
  message: false
  error: false
---

# To do

1. Add time to all models
2. Add prepotency to accuracy models
3. allow prepotency to correlate across accuracy and RT models.

```{r libs, echo=FALSE, message=FALSE, error=FALSE, warning=FALSE}
CPUs=4
library(brms)
library(ggplot2)
library(bayesplot)
library(modelsummary)
library(curvish)
library(priorsense)
```


```{r load_report_functions, include=FALSE, cache=FALSE}
if(interactive()){
  source('report_functions.R')
}else{
  knitr::read_chunk('report_functions.R')
}
```

```{r functions}
```

# H1: How does reaction time vary across age? 

::: {.panel-tabset}

## Plot age effect

```{r}
rtage_fit <- read_fit_models('rtage')

print(plot_cond_eff(fit = rtage_fit, xvar = 'age', xname = 'Age', yname = 'Reaction Time',
                    condition_title = 'N prev "Go" trials', mean_center_y = FALSE,
                    method = 'posterior_epred', hex = TRUE, line_color = 'white', ribbon_color = 'white',
                    hex_args = list(binwidth = c(.2, .015), alpha = .8),
                    hex_log = TRUE))
```
## Model summary

```{r}
summary(rtage_fit)
prior_summary(rtage_fit)
```

## Prior Sensitivity

```{r}
rtage_psp <- powerscale_sequence_pred(rtage_fit, x_var = 'age', res = 20)
rtage_psp$plot
```

## PP Check

```{r}
brms::pp_check(rtage_fit) + theme_minimal()
```

## Plot age derivative

```{r}
rtage_fit_deriv <- curvish::derivatives(rtage_fit, term = 's(age, k = 10)', order = 1)
plot(rtage_fit_deriv, robust = TRUE, deriv = 1, outer = FALSE)
```

## Plot slope = 0 posterior

```{r}
rtage_fit_0 <- curvish::posterior_x_at_yequalto(rtage_fit, term = 's(age,k=10)', n = 100, eps = .001, value = 0, multimodal = TRUE)
plot(rtage_fit_0, robust = TRUE, mode = TRUE)
```

## Plot slope min posterior

```{r}
rtage_fit_min <- curvish::posterior_x_at_miny(rtage_fit, term = 'age', n = 100, eps = .001, multimodal = TRUE)
plot(rtage_fit_min, robust = TRUE, mode = TRUE)
```
:::

# Test

```{r}
rtageprepotalt_null_test_c01_fit <- readRDS('fits/rtageprepotaltnull_test_c01.rds')
rtageprepotalt_null_test_c02_fit <- readRDS('fits/rtageprepotaltnull_test_c02.rds')
rtageprepotalt_null_test_c03_fit <- readRDS('fits/rtageprepotaltnull_test_c03.rds')
rtageprepotalt_null_test_c04_fit <- readRDS('fits/rtageprepotaltnull_test_c04.rds')
rtageprepotalt_null_test_fit <- read_fit_models(model_name = 'rtageprepotaltnull_test')
length(rtageprepotalt_null_test_c01_fit$criteria$kfold$pointwise)
length(rtageprepotalt_null_test_c02_fit$criteria$kfold)
length(rtageprepotalt_null_test_c03_fit$criteria$kfold)
length(rtageprepotalt_null_test_c04_fit$criteria$kfold$pointwise)
length(rtageprepotalt_null_test_fit$criteria$kfold$pointwise)
#str(rtageprepotalt_null_test_fit$criteria$kfold$fits)
```


# H2: How does the effect of prepotency vary across age?

::: {.panel-tabset}

## Model Comparison

```{r}
if(!any(grepl('rtage_fit', ls()))){
  rtage_fit <- read_fit_models('rtage')
}
rtageprepot_fit <- read_fit_models('rtageprepot')
#rtageprepotdist_fit <- read_fit_models('rtagepropotdist')
rtageprepotalt_fit <- read_fit_models('rtageprepotalt')
rtageprepot_null_fit <- read_fit_models('rtageprepotnull')
rtageprepotalt_null_fit <- read_fit_models('rtageprepotaltnull')

loo_compare(rtage_fit, rtageprepot_fit, rtageprepotalt_fit, rtageprepot_null_fit, rtageprepotalt_null_fit)
```

## Plot age x prepotency effect

```{r}
print(plot_cond_eff(fit = rtageprepotalt_null_fit, xvar = 'age', xname = 'Age', yname = 'Reaction Time',
                    conditions = data.frame(exact_prepotency_ofactor = 0:3), 
                    condition_title = 'N prev "Go" trials', mean_center_y = FALSE,
                    method = 'posterior_epred', hex = TRUE, hex_log = TRUE, 
                    hex_args = list(alpha = .9, binwidth = c(.25, .02))))
```
## Prior Sensitivity

```{r}
rtageprepotalt_null_psp <- powerscale_sequence_pred(rtageprepotalt_null_fit, x_var = 'age', res = 20)
rtageprepotalt_null_psp$plot
powerscale_sensitivity(rtageprepotalt_null_fit, variable = variables(rtageprepotalt_null_fit)[c(1:4, 18)])
```

## Model summary

```{r}
summary(rtageprepotalt_null_fit)
```

## Posterior predictive check

```{r}
pp_check(rtageprepotalt_null_fit) + theme_minimal()
```

## Prior sensitivity

```{r}
library(priorsense)
rtageprepotalt_null_psps <- priorsense::powerscale(rtageprepotalt_null_fit, 'prior', alpha = 0.9, prediction = posterior_epred)
str(rtageprepotalt_null_psps)
class(rtageprepotalt_null_psps)
```



## (normalized) Plot age x prepotency effect 

Mean across levels of prepotency subtracted out at each age.

```{r}
rtagepropot_fit <- read_fit_models('rtagepropot')
rtagepropot_null_fit <- read_fit_models('rtagepropotnull')

print(plot_cond_eff(fit = rtagepropot_fit, xvar = 'age', xname = 'Age', yname = 'Reaction Time',
                    conditions = data.frame(exact_prepotency = 0:3), 
                    condition_title = 'N prev "Go" trials', mean_center_y = TRUE))
```

## Plot prepotency x age effect

```{r}
print(plot_cond_eff(fit = rtagepropot_fit, xvar = 'exact_prepotency', xname = 'exact_prepotency', yname = 'Reaction Time',
                    conditions = data.frame(age = c(8, 11, 14, 17)), 
                    condition_title = 'Age (years)'))
```

:::

# H3: How does accuracy vary across age?

::: {.panel-tabset}

## Plot age effect

```{r}
accage_fit <- read_fit_models('accage')

print(plot_cond_eff(fit = accage_fit, xvar = 'age_ACC', xname = 'Age', yname = 'Accuracy'))
```

## Plot age derivative

```{r}
accage_fit_deriv <- curvish::derivatives(accage_fit, term = 'age_ACC', order = 1)
plot(accage_fit_deriv, robust = TRUE, deriv = 1, outer = FALSE)
```

## Plot slope = 0 posterior

```{r}
accage_fit_0 <- curvish::posterior_x_at_yequalto(accage_fit, term = 'age_ACC', n = 100, eps = .001, value = 0, multimodal = TRUE)
plot(accage_fit_0, robust = TRUE, mode = TRUE)
```

## Plot slope = min slope posterior

```{r}
accage_fit_max <- curvish::posterior_x_at_maxy(accage_fit, term = 'age_ACC', n = 100, eps = .001, multimodal = TRUE)
plot(accage_fit_max, robust = TRUE, mode = TRUE)
```
## Model summary

```{r}
summary(accage_fit)
```

:::

# H4: How does change in reaction time across sequential Go-trials predict accuracy?

::: {.panel-tabset}

## Plot effect

The plots here show the correlations between the random effects from two models. The _prepotency_ random effect is the random slope of the effect of the number of previous Go trials on the reaction time---that is, how much does a previous Go trial increase or decrease the RT, for each person. The _accuracy_ random effect is the random intercept from the model of accuracy predicted by age, meaning it's each person's average accuracy after accounting for age (that is, a person's deviation from the age trend). The top density in the plot represents the posterior probability distribution for the size of the correlation between these two random effects, with shading up to the 95% credible interval, and lines out to the `r sprintf('%0.1f', 100*(1-.001))`% credible interval.

A positive correlation between these random effects would indicate that people who have a greater tendency to speed up with each Go (smaller RTs) also tend to have lower accuracy.


```{r}
accprepot_fit <- read_fit_models('accprepot')

p <- brms::mcmc_plot(accprepot_fit, 
                variable = '^cor_sID_factor__.*',
                regex = TRUE, type = 'areas', area_method = 'equal height',
                prob = 1-.05, prob_outer = 1-.001)
p + scale_y_discrete(labels = c(expression(cor(bar(textstyle("RT")), textstyle("Prepotency"))), 
                                expression(cor(bar(textstyle("RT")), textstyle("Accuracy"))),
                                expression(cor(textstyle("Prepotency"), textstyle("Accuracy"))))) + 
  coord_cartesian(x = c(-1, 1)) + 
  theme_minimal()
```
We see no credibly positive or negative association between prepotency effect and accuracy. The second two posterior densities represent correlations that weren't of focal interest. The first is between average reaction time and average accuracy (after accounting for age), while the final is between average reaction time and the degree of prepotency effect (again, after accounting for age). The former suggests that people with higher average reaction times are more accurate (i.e., taking one's time improves accuracy). In light of the average prepotency effect being _positive_ (people strategically slow down with every go trial), the latter negative correlation suggests that people with higher reaction times show a reduced prepotency effect; that is, less strategic participants are slower. 

## Age $\rightarrow$ cor(Prepotency, Accuracy)

EXTREMELY ROUGH EXPLORATORY ANALYSIS  

```{r}
accprepot_ranef <- ranef(accprepot_fit)
dimnames(accprepot_ranef$sID_factor[, 'Estimate', ])[[2]]
accprepot_ranef_df <- as.data.frame(accprepot_ranef$sID_factor[, 'Estimate', c('RTshape_exact_prepotency', 'corRejecttotal_Intercept')])
accprepot_ranef_df$id <- rownames(accprepot_ranef_df)
demos <- data.table::fread('HCPD_COMBINED20200608.csv',
                           select = c('id', 'age', 'gender', 'site', 'RACE', 'SES_PLVL', 'SES_RLVL', 'income'))
accprepot_ranef_df <- merge(accprepot_ranef_df, demos, on = c('id'))
summary(lm(corRejecttotal_Intercept ~ age*RTshape_exact_prepotency, data = accprepot_ranef_df))
ggplot(accprepot_ranef_df,
       aes(x = RTshape_exact_prepotency, y = corRejecttotal_Intercept, color = age)) + 
  geom_point()
```


## Model summary

```{r}
summary(accprepot_fit)
```

## Posterior predictive check

```{r}
pp_check(accprepot_fit, resp = 'RTshape') + theme_minimal()
pp_check(accprepot_fit, resp = 'corRejecttotal') + theme_minimal()
```

:::

# H5: How does accuracy vary with previous reward history, conditional on age?

::: {.panel-tabset}

## Plot accuracy x age x reward history effect

```{r}
accprevcond_fit <- read_fit_models('accprevcond')

print(plot_cond_eff(fit = accprevcond_fit, xvar = 'age_ACC', xname = 'Age', yname = 'Accuracy',
                    conditions = data.frame(nogoCondition = c('prevLossNogo', 'prevRewNogo')), 
                    condition_title = 'Previous conditioning'))
```
## Effect size

```{r}
age_ACC_10_18 <- posterior_effect_size(fit = accprevcond_fit, 
                                       es_name = 'Change in accuracy Age 10 - Age 18',
                                       newdata = 
                                         as.data.frame(expand.grid(nogo.total = 1, 
                                                                   nogoCondition = 'prevRewNogo', 
                                                                   age_ACC = c(10, 18))))
mcmc_areas(age_ACC_10_18$posterior, prob = .95, prob_outer = .99) + theme_minimal()
```


## Model summary

```{r}
summary(accprevcond_fit)
```

:::

# H6: How do Guessing RTs vary between high and low magnitude blocks, conditional on age?

::: {.panel-tabset}

## Plot accuracy x age x reward history effect

```{r}
rtguessing_fit <- read_fit_models('rtguessing')

print(plot_cond_eff(fit = rtguessing_fit, xvar = 'age', xname = 'Age', yname = 'RT',
                    conditions = data.frame(valueCondition = c('high', 'low')), 
                    condition_title = 'Reward Magnitude'))
```

## Effect size

```{r}
rt_guess_10_18 <- posterior_effect_size(fit = rtguessing_fit, 
                                        es_name = 'Change in RT Age 10 - Age 18',
                                        newdata = 
                                          as.data.frame(expand.grid(valueCondition = 'high', 
                                                                    age = c(10, 18))))
mcmc_areas(rt_guess_10_18$posterior, prob = .95, prob_outer = .99) + theme_minimal()
```

## Model summary

```{r}
summary(rtguessing_fit)
```

:::

# Hxx: How does accuracy vary across age and trial?

::: {.panel-tabset}

## Plot age x time effect

```{r}
acctrial_fit <- read_fit_models('acctrial')
conditional_effects(acctrial_fit)
print(plot_cond_eff(fit = acctrial_fit, xvar = 'age', xname = 'Age', yname = 'Accuracy',
                    conditions = data.frame(time = c(-75, 0, 75))))
```

## Plot age derivative

```{r}
accage_fit_deriv <- curvish::derivatives(accage_fit, term = 'age_ACC', order = 1)
plot(accage_fit_deriv, robust = TRUE, deriv = 1, outer = FALSE)
```

## Plot slope = 0 posterior

```{r}
accage_fit_0 <- curvish::posterior_x_at_yequalto(accage_fit, term = 'age_ACC', n = 100, eps = .001, value = 0, multimodal = TRUE)
plot(accage_fit_0, robust = TRUE, mode = TRUE)
```

## Plot slope = min slope posterior

```{r}
accage_fit_max <- curvish::posterior_x_at_maxy(accage_fit, term = 'age_ACC', n = 100, eps = .001, multimodal = TRUE)
plot(accage_fit_max, robust = TRUE, mode = TRUE)
```
## Model summary

```{r}
summary(accage_fit)
```

:::
